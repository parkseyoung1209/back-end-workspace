<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.MemberMapper">
	<insert id="register" parameterType="Member">
		INSERT INTO member
		VALUES (#{id}, #{password}, #{name})
	</insert>
	<select id="allMember" resultType="Member">
		SELECT * FROM member
	</select>
	<select id="login" parameterType="Member" resultType="Member">
		SELECT * FROM member WHERE id=#{id} AND password=#{password}
	</select>
	
	<!-- 
		* if
		- 동적 쿼리를 구현할 때 기본적으로 사용되는 구문
		- 특정 조건을 만족할 경우 안의 구문을 쿼리에 포함
		
		* choose
		- JSTL의 choose 구문과 유사하여 주어진 구문 중 한가지만을 수행
		
		* trim : 쿼리 구분의 특정 부분을 없앨 때 사용
		- prefix로 처음 시작할 단어와 prefixOverrides로 시작 시 제거해야 할 단어 명시
		- suffixOverrides로 끝날시 제거해야 할 단어 명시
		- where 또는 set을 더 많이 사용
		
		*set
		- 기존의 UPDATE SET 절을 동적으로 구현할 때 사용
		- SET 키워드를 붙이고 불필요한 콤마(,)를 제거
		
		* where
		- 기존 쿼리의 WHERE 절을 동적으로 구현할 때 사용
		- 만약 태그 안의 내용이 AND나 OR로 시작할 경우 AND나 OR을 제거
	 -->
	<update id="update" parameterType="Member">
		UPDATE member 
		<!--  <trim prefix="SET" suffixOverrides=",">-->
		<set>
			<if test="password != null">
				 password=#{password},
			</if>
			<if test="name != null">
				name=#{name}
			</if>
			</set>
			WHERE id=#{id}
	</update>
	<!-- select에 따라서 all이면 아이디 또는 이름으로 검색
		id면 아이디에서만 검색
		name이면 이름에서만 검색
	-->
	<select id="search" parameterType="SearchDTO" resultType="Member">
		SELECT *
		FROM member
		<where>
		<choose>
		<when test="select.equals('all')">
		id LIKE CONCAT('%', #{keyword},'%')
		OR name LIKE CONCAT('%', #{keyword},'%')
		</when>
		<when test="select.equals('id')">
		id LIKE CONCAT('%', #{keyword},'%')
		</when>
		<otherwise>
		name LIKE CONCAT('%', #{keyword},'%')
		</otherwise>
		</choose>
		</where>	
	</select>
	<!--  foreach : 동적 쿼리를 구현할 때 컬렉션에 대한 반복 처리 제공 -->
	<delete id="delete" parameterType="ArrayList">
		DELETE FROM member
		<where>
		id IN 
		<foreach collection="idList" item="id" open="(" close=")" separator=",">
		#{id}
		</foreach>
		</where>
	</delete>
</mapper>